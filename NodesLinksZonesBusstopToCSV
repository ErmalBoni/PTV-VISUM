# Script Created by Ermal Sylejmani, ChatGPT, ClaudeAI - 23/08/2024
# Name: NodesLinksZonesBusstopToCSV.py
# Description: This Python script connects to the PTV Visum software and automates the export of traffic model data into CSV files.
# It retrieves and exports data for nodes, links, zones, and bus stops, including a range of useful attributes.
# The script handles errors and logs progress to ensure smooth operation.
#
# Key Features:
# - Connects to PTV Visum and loads a specified traffic model.
# - Exports data into CSV files for nodes, links, zones, and bus stops.
# - Attributes exported include node numbers, link capacities, zone coordinates, and bus stop details.
# - Comprehensive logging and error handling for robust performance.
#
# Instructions:
# 1. Ensure you have the `pywin32` and `pandas` packages installed. You can install them using pip:
#    pip install pywin32 pandas
# 2. Update the `model_path` variable with the full path to your PTV Visum model file (line 89, e.g., "C:\\path\\to\\your\\model.ver").
#    # Update: Add your model path here
#    model_path = r"C:\path\to\your\model.ver"
# 3. Run the script using a Python interpreter. The script will connect to Visum, load the model, and generate CSV files.
# 4. The following CSV files will be created in the script's directory:
#    - `Nodes.csv`: Contains details about nodes including node number, control type, type number, and coordinates.
#    - `Links.csv`: Includes information on links such as link number, from/to node numbers, length, capacity, free flow speed, and volume.
#    - `Zones.csv`: Lists zones with zone number and coordinates.
#    - `StopPoints.csv`: Provides data on stop points including stop point number, coordinates, name, associated node number, number of lines, and TSysSet.
#
# 5. For different projects or changes in attributes, update the following lines:
#    - Line 47: Modify the attributes retrieved for nodes if you need different node details.
#    - Line 63: Adjust the attributes for links to match the required data for your project.
#    - Line 79: Change the attributes for zones if additional or different zone data is needed.
#    - Line 95: Update the attributes for stop points based on your specific requirements.
#
# Future Enhancements:
# - If you have suggestions for additional attributes or improvements, please share your ideas!
# - We are also exploring the possibility of generating shapefiles for nodes, links, and stop points. Stay tuned for updates!

import win32com.client
import csv
import os
import logging
import time
import shutil
from time import time as timer  # Timer for measuring execution time
import pandas as pd
import chardet  # For automatic encoding detection

# Initialize logging
logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)
logger.propagate = False  # Prevent log messages from being propagated to the root logger

# Control Type mapping
CONTROL_TYPE_MAP = {
    0: "unknown", 1: "Uncontrolled", 2: "Two-way stop", 3: "Signalized",
    4: "All-way stop", 5: "Roundabout", 6: "Two-way yield"
}

def clear_com_cache():
    """Clear the win32com cache to fix any corrupted COM registrations."""
    try:
        gen_py_dir = os.path.join(os.path.expanduser("~"), "AppData", "Local", "Temp", "gen_py")
        if os.path.exists(gen_py_dir):
            shutil.rmtree(gen_py_dir)
            logger.info("Cleared win32com cache.")
        else:
            logger.info("win32com cache directory not found.")
    except Exception as e:
        logger.error(f"Failed to clear win32com cache: {e}")

def Init():
    """Initialize connection to Visum."""
    try:
        start_time = timer()
        Visum = win32com.client.Dispatch('Visum.Visum')
        end_time = timer()
        logger.info(f"Visum application launched successfully in {end_time - start_time:.2f} seconds.")
        return Visum
    except Exception as e:
        logger.error(f"Error connecting to Visum: {e}")
        logger.info("Attempting to clear COM cache and retry...")
        clear_com_cache()
        try:
            time.sleep(2)
            start_time = timer()
            Visum = win32com.client.Dispatch('Visum.Visum')
            end_time = timer()
            logger.info(f"Visum connected successfully after clearing COM cache in {end_time - start_time:.2f} seconds.")
            return Visum
        except Exception as e:
            logger.error(f"Error connecting to Visum after clearing COM cache: {e}")
            return None

def load_model(Visum, model_path):
    """Load the traffic model into Visum."""
    try:
        start_time = timer()
        Visum.LoadVersion(model_path)
        end_time = timer()
        logger.info(f"Model loaded successfully from {model_path} in {end_time - start_time:.2f} seconds.")
        return True
    except Exception as e:
        logger.error(f"Failed to load model from {model_path}: {e}")
        return False

def export_to_csv(data, headers, filename):
    """Export data to a CSV file."""
    try:
        start_time = timer()
        current_dir = os.path.dirname(os.path.abspath(__file__))
        output_csv_path = os.path.join(current_dir, filename)
        with open(output_csv_path, mode='w', newline='', encoding='utf-8') as file:
            writer = csv.writer(file, delimiter=';')
            writer.writerow(headers)
            for row in data:
                new_row = [f"{int(item)}" if isinstance(item, float) and item.is_integer() 
                           else f"{item:.6f}" if isinstance(item, float) 
                           else str(item) for item in row]
                writer.writerow(new_row)
        end_time = timer()
        logger.info(f"CSV file created successfully: {output_csv_path} in {end_time - start_time:.2f} seconds.")
        return output_csv_path
    except Exception as e:
        logger.error(f"Error creating CSV file {filename}: {e}")
        return None

def export_nodes_with_control_type(Visum):
    """Export node data with control types."""
    try:
        logger.info("Exporting nodes...")
        headers = ["Node Number", "Control Type", "Type Number", "X Coordinate", "Y Coordinate"]
        start_time = timer()
        Nodes = Visum.Net.Nodes.GetMultipleAttributes(["No", "ControlType", "TypeNo", "XCoord", "YCoord"])
        end_time = timer()
        logger.debug(f"Retrieved {len(Nodes)} nodes in {end_time - start_time:.2f} seconds.")
        
        if not Nodes:
            logger.warning("No nodes were retrieved from Visum.")
            return None

        processed_nodes = [[node[0], CONTROL_TYPE_MAP.get(node[1], "Unknown"), node[2], node[3], node[4]] for node in Nodes]
        return export_to_csv(processed_nodes, headers, "Nodes.csv")
    except Exception as e:
        logger.error(f"Error exporting nodes: {e}")
        return None

def export_links(Visum):
    """Export link data."""
    try:
        logger.info("Exporting links...")
        headers = ["Link Number", "From Node Number", "To Node Number", "Length", "Capacity", "Free Flow Speed", "Volume"]
        available_attributes = ["No", "FromNodeNo", "ToNodeNo", "Length", "CapPrT", "V0PrT", "VolVehPrT", "VolPersPuT"]

        logger.debug(f"Attempting to retrieve attributes: {available_attributes}")
        start_time = timer()
        Links = Visum.Net.Links.GetMultipleAttributes(available_attributes)
        end_time = timer()
        logger.debug(f"Retrieved {len(Links)} links in {end_time - start_time:.2f} seconds.")
        
        if not Links:
            logger.warning("No links were retrieved from Visum.")
            return None
        
        processed_links = []
        for link in Links:
            if len(link) != len(available_attributes):
                logger.warning(f"Link data mismatch. Expected {len(available_attributes)} attributes, got {len(link)}")
                continue
            processed_links.append(link)
        
        logger.debug(f"Processed {len(processed_links)} links for export.")
        return export_to_csv(processed_links, headers, "Links.csv")
    except AttributeError as e:
        logger.error(f"Visum attribute error: {e}. Check if all attributes are valid for your Visum version.")
    except win32com.client.pywintypes.com_error as e:
        logger.error(f"COM error when exporting links: {e}")
    except Exception as e:
        logger.error(f"Unexpected error exporting links: {e}")
    return None

def export_zones(Visum):
    """Export zone data."""
    try:
        logger.info("Exporting zones...")
        headers = ["Zone Number", "X Coordinate", "Y Coordinate"]
        start_time = timer()
        Zones = Visum.Net.Zones.GetMultipleAttributes(["No", "XCoord", "YCoord"])
        end_time = timer()
        logger.debug(f"Retrieved {len(Zones)} zones in {end_time - start_time:.2f} seconds.")
        
        if not Zones:
            logger.warning("No zones were retrieved from Visum.")
            return None
        
        return export_to_csv(Zones, headers, "Zones.csv")
    except Exception as e:
        logger.error(f"Error exporting zones: {e}")
        return None

def export_stop_points(Visum):
    """Export stop point data."""
    try:
        logger.info("Exporting stop points...")
        headers = ["Stop Point Number", "X Coordinate", "Y Coordinate", "Name", "Node Number", "Number of Lines", "TSysSet"]
        start_time = timer()
        StopPoints = Visum.Net.StopPoints.GetMultipleAttributes(["No", "XCoord", "YCoord", "Name", "NodeNo", "NumLines", "TSysSet"])
        end_time = timer()
        logger.debug(f"Retrieved {len(StopPoints)} stop points in {end_time - start_time:.2f} seconds.")
        
        if not StopPoints:
            logger.warning("No stop points were retrieved from Visum.")
            return None
        
        return export_to_csv(StopPoints, headers, "StopPoints.csv")
    except Exception as e:
        logger.error(f"Error exporting stop points: {e}")
        return None

def main():
    """Main function to execute the export process."""
    model_path = r"C:\path\to\your\model.ver"  # Update: Add your model path here
    Visum = Init()
    if Visum and load_model(Visum, model_path):
        try:
            nodes_csv = export_nodes_with_control_type(Visum)
            if nodes_csv:
                time.sleep(5)  # Pause for 5 seconds
                logger.info("Nodes exported. Pausing for 5 seconds...")

            links_csv = export_links(Visum)
            if links_csv:
                time.sleep(5)  # Pause for 5 seconds
                logger.info("Links exported. Pausing for 5 seconds...")

            zones_csv = export_zones(Visum)
            if zones_csv:
                time.sleep(5)  # Pause for 5 seconds
                logger.info("Zones exported. Pausing for 5 seconds...")

            stop_points_csv = export_stop_points(Visum)
            if stop_points_csv:
                time.sleep(5)  # Pause for 5 seconds
                logger.info("Stop points exported. Pausing for 5 seconds...")

            logger.info("Export process completed.")
        
        except Exception as e:
            logger.error(f"Error in the export process: {e}")
    else:
        logger.error("Failed to initialize Visum or load the model.")

if __name__ == "__main__":
    main()
